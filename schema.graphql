### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""The count of updated records"""
type AffectedRowsOutput {
  count: Int!
}

"""The user status filter field"""
input EnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: EnumUserStatusFilter
  notIn: [UserStatus!]
}

"""The user type filter field"""
input EnumUserTypeFilter {
  equals: UserType
  in: [UserType!]
  not: EnumUserTypeFilter
  notIn: [UserType!]
}

"""Int filter conditions and operators"""
input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

type Mutation {
  """
  This is the root query needed for Nexus to properly extend `Mutation` with the use `extendType` or `mutationField`
  """
  _: Boolean

  """Update an existing user"""
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User

  """Create a new user"""
  user(data: UserCreateInput!): User
}

type Query {
  """
  This is the root query needed for Nexus to properly extend `Query` with the use `extendType` or `queryField`
  """
  _: Boolean

  """Fetch a specific user"""
  user(where: UserWhereUniqueInput): User

  """Fetch a list of users"""
  users(where: UserWhereInput): [User!]
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

"""String filter conditions and operators"""
input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Subscription {
  """
  This is the root query needed for Nexus to properly extend `Subscription` with the use `extendType` or `subscriptionField`
  """
  _: Boolean
}

"""The user credentials & common information"""
type User {
  email: String!
  id: ID!
  status: UserStatus!
  type: UserType!
  username: String!
}

"""The user create fields"""
input UserCreateInput {
  email: String!
  password: String!
  status: UserStatus
  type: UserType
  username: String!
}

"""The user order by fields"""
input UserOrderByInput {
  email: SortOrder
  id: SortOrder
  password: SortOrder
  type: SortOrder
  username: SortOrder
}

"""The user status"""
enum UserStatus {
  ACTIVE
  BANNED
  INACTIVE
}

"""The user type"""
enum UserType {
  ADMIN
  EMPLOYEE
  USER
}

"""The user update fields"""
input UserUpdateInput {
  email: String
  password: String
  status: UserStatus
  type: UserType
  username: String
}

"""The user filter fields"""
input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  id: StringFilter
  status: EnumUserStatusFilter
  type: EnumUserTypeFilter
  username: StringFilter
}

"""The user unique filter fields"""
input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
